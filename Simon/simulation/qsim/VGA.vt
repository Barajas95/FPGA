// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/19/2015 18:55:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    VGA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module VGA_vlg_sample_tst(
	CLOCK_50,
	PUSH_BLUE,
	PUSH_GREEN,
	PUSH_RED,
	PUSH_YELLOW,
	sampler_tx
);
input  CLOCK_50;
input  PUSH_BLUE;
input  PUSH_GREEN;
input  PUSH_RED;
input  PUSH_YELLOW;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or PUSH_BLUE or PUSH_GREEN or PUSH_RED or PUSH_YELLOW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module VGA_vlg_check_tst (
	BLANK,
	CLOCK_25,
	SINC,
	VGA_B,
	VGA_G,
	VGA_HS,
	VGA_R,
	VGA_VS,
	sampler_rx
);
input  BLANK;
input  CLOCK_25;
input  SINC;
input [9:0] VGA_B;
input [9:0] VGA_G;
input  VGA_HS;
input [9:0] VGA_R;
input  VGA_VS;
input sampler_rx;

reg  BLANK_expected;
reg  CLOCK_25_expected;
reg  SINC_expected;
reg [9:0] VGA_B_expected;
reg [9:0] VGA_G_expected;
reg  VGA_HS_expected;
reg [9:0] VGA_R_expected;
reg  VGA_VS_expected;

reg  BLANK_prev;
reg  CLOCK_25_prev;
reg  SINC_prev;
reg [9:0] VGA_B_prev;
reg [9:0] VGA_G_prev;
reg  VGA_HS_prev;
reg [9:0] VGA_R_prev;
reg  VGA_VS_prev;

reg  CLOCK_25_expected_prev;

reg  last_CLOCK_25_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	BLANK_prev = BLANK;
	CLOCK_25_prev = CLOCK_25;
	SINC_prev = SINC;
	VGA_B_prev = VGA_B;
	VGA_G_prev = VGA_G;
	VGA_HS_prev = VGA_HS;
	VGA_R_prev = VGA_R;
	VGA_VS_prev = VGA_VS;
end

// update expected /o prevs

always @(trigger)
begin
	CLOCK_25_expected_prev = CLOCK_25_expected;
end



// expected CLOCK_25
initial
begin
	CLOCK_25_expected = 1'bX;
	CLOCK_25_expected = #999000 1'b0;
end 
// generate trigger
always @(BLANK_expected or BLANK or CLOCK_25_expected or CLOCK_25 or SINC_expected or SINC or VGA_B_expected or VGA_B or VGA_G_expected or VGA_G or VGA_HS_expected or VGA_HS or VGA_R_expected or VGA_R or VGA_VS_expected or VGA_VS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BLANK = %b | expected CLOCK_25 = %b | expected SINC = %b | expected VGA_B = %b | expected VGA_G = %b | expected VGA_HS = %b | expected VGA_R = %b | expected VGA_VS = %b | ",BLANK_expected_prev,CLOCK_25_expected_prev,SINC_expected_prev,VGA_B_expected_prev,VGA_G_expected_prev,VGA_HS_expected_prev,VGA_R_expected_prev,VGA_VS_expected_prev);
	$display("| real BLANK = %b | real CLOCK_25 = %b | real SINC = %b | real VGA_B = %b | real VGA_G = %b | real VGA_HS = %b | real VGA_R = %b | real VGA_VS = %b | ",BLANK_prev,CLOCK_25_prev,SINC_prev,VGA_B_prev,VGA_G_prev,VGA_HS_prev,VGA_R_prev,VGA_VS_prev);
`endif
	if (
		( CLOCK_25_expected_prev !== 1'bx ) && ( CLOCK_25_prev !== CLOCK_25_expected_prev )
		&& ((CLOCK_25_expected_prev !== last_CLOCK_25_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLOCK_25 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLOCK_25_expected_prev);
		$display ("     Real value = %b", CLOCK_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CLOCK_25_exp = CLOCK_25_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module VGA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg PUSH_BLUE;
reg PUSH_GREEN;
reg PUSH_RED;
reg PUSH_YELLOW;
// wires                                               
wire BLANK;
wire CLOCK_25;
wire SINC;
wire [9:0] VGA_B;
wire [9:0] VGA_G;
wire VGA_HS;
wire [9:0] VGA_R;
wire VGA_VS;

wire sampler;                             

// assign statements (if any)                          
VGA i1 (
// port map - connection between master ports and signals/registers   
	.BLANK(BLANK),
	.CLOCK_25(CLOCK_25),
	.CLOCK_50(CLOCK_50),
	.PUSH_BLUE(PUSH_BLUE),
	.PUSH_GREEN(PUSH_GREEN),
	.PUSH_RED(PUSH_RED),
	.PUSH_YELLOW(PUSH_YELLOW),
	.SINC(SINC),
	.VGA_B(VGA_B),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_VS(VGA_VS)
);

// CLOCK_50
initial
begin
	repeat(99)
	begin
		CLOCK_50 = 1'b0;
		CLOCK_50 = #5000 1'b1;
		# 5000;
	end
	CLOCK_50 = 1'b0;
	CLOCK_50 = #5000 1'b1;
	CLOCK_50 = #4000 1'b0;
end 

VGA_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.PUSH_BLUE(PUSH_BLUE),
	.PUSH_GREEN(PUSH_GREEN),
	.PUSH_RED(PUSH_RED),
	.PUSH_YELLOW(PUSH_YELLOW),
	.sampler_tx(sampler)
);

VGA_vlg_check_tst tb_out(
	.BLANK(BLANK),
	.CLOCK_25(CLOCK_25),
	.SINC(SINC),
	.VGA_B(VGA_B),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_VS(VGA_VS),
	.sampler_rx(sampler)
);
endmodule

